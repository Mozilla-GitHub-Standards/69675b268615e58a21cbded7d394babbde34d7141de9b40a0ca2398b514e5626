import sys

from urlparse import urlparse
from httplib import HTTPConnection, HTTPSConnection, HTTPException

RELEVANT_FIELDS = ("id", "status", "severity", "priority", "product", "component")

class Bug(object):
    """A bug that contains only the fields that need to be verified."""

    @staticmethod
    def from_unicode_dict(record):
        """Make a bug from a record as it is generated by reading REST service responses (unicode keys)."""
        return Bug(**dict(map(lambda item: (item[0].encode(), item[1]),
                              record.items())))

    def __init__(self, **kwds):
        for f in RELEVANT_FIELDS:
            if f not in kwds:
                print("Missing field %s to create bug." % f)
        self.__dict__.update(kwds)

    def __repr__(self):
        return "Bug(**%r)" % dict(filter(lambda item: item[0] in RELEVANT_FIELDS,
                                         self.__dict__.items()))

    def __eq__(self, other):
        if not isinstance(other, Bug): return False
        for name in RELEVANT_FIELDS:
            if self.__dict__[name] != other.__dict__[name]:
                return False
        return True

    def __ne__(self, other):
        return not self == other

    def __hash__(self):
        return self.bug_id


class BugRepo(object):

    def __init__(self, base_url):
        parts = urlparse(base_url)
        self.base_url = base_url
        scheme = parts.scheme or "http"
        self.host = "%s:%d" % (parts.hostname, parts.port or (443 if scheme == "https" else 80))
        try:
            self.connection = (HTTPSConnection if scheme == "https" else HTTPConnection)(self.host)
        except HTTPException as e:
            print("%r: %s connection error" % (self, parts.scheme.upper()))
            print(e)
            print("exiting")
            sys.exit(1)

    def __repr__(self):
        return "%s('%s')" % (self.__class__, self.base_url)

    def get(self, id):
        """Should return a bug object or None if the Bug was not found."""
        raise "Operation not available."

    def delete(self, id):
        raise "Operation not available."
