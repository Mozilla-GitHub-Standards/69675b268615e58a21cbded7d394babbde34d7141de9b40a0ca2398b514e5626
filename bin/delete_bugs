#! /usr/bin/env python
# Delete a list or a range of bugs

import sys
import subprocess
import json
from datetime import datetime
import dateutil
from urllib import quote
from httplib import HTTPConnection, OK, NOT_FOUND, HTTPException

class Http404:
    pass

def delete(con, path):
    print("DELETE %s" % path)
    con.request("DELETE", path)
    response = con.getresponse()
    # Need this so the connection accepts a new request.
    response.read().decode("utf-8")
    if response.status != OK:
        if response.status == NOT_FOUND: raise Http404
        else: raise HTTPException(response.status)

def get(con, path):
    print("GET %s" % path)
    con.request("GET", path)
    response = con.getresponse()
    responseText = response.read().decode("utf-8")
    if response.status != OK:
        if response.status == NOT_FOUND: raise Http404
        else: raise HTTPException(response.status)
    return json.loads(responseText)

def delete_bug(lily_host, bug_id):
    try:
        con = HTTPConnection(lily_host)
        print("[Bug #%s] getting master bug record versions" % bug_id)
        master_id = "USER.#%s" % bug_id
        master_path = "/repository/record/%s" % quote(master_id)
        try:
            master = get(con, master_path)
        except Http404:
            print("[Bug #%s] 404 does not exists. skipping" % bug_id)
            return
        num_versions = master["version"]
        print("[Bug #%s] OK got bug '%s' (%s versions)" % (bug_id, master["id"], num_versions))

        print("[Bug #%s] getting slave/version record ids" % bug_id)
        for v in xrange(num_versions, 0, -1):
            slave_id = "%s v%s" % (master_id, v)
            slave_path = "/repository/record/%s" % quote(slave_id)
            try:
                slave = get(con, slave_path)
                print("[Bug #%s] ... v%s OK got slave record %r" % (bug_id, v, slave["id"]))
                delete(con, slave_path)
                print("[Bug #%s] ... v%s OK deleted %r" % (bug_id, v, slave["id"]))
            except Http404:
                print("[Bug #%s] ... v%s does not exists (incomplete import?)" % (bug_id, v))

        print("[Bug #%s] deleted slave/version records" % bug_id)

        delete(con, master_path)
        print("[Bug #%s] deleted master record." % bug_id)

    except HTTPException, e:
        print("HTTP connection error")
        print(e)
        print("exiting")
        sys.exit(1)

def main(arguments):
    if len(arguments) < 3:
        print("usage: %s LILY_HOST FROM_ID [EXCLUSIVE_TO_ID]" % arguments[0])
        sys.exit(1)
    lily_host = arguments[1]
    from_id = int(arguments[2])
    to_id = from_id + 1
    if len(arguments) == 4:
        to_id = int(arguments[3])

    if to_id - from_id > 1:
        print("Delete bugs %s (inclusive) to %s (exclusive)? (Enter 'Yes')" % (from_id, to_id))
        if raw_input() != 'Yes':
            print("Cancelled by user.")
            sys.exit(1)

    for id in xrange(from_id, to_id):
        delete_bug(lily_host, id)
        print("")

    print("You should run:                     echo \"major_compact 'record' | hbase shell\"")
    print("To make index changes visible, run: bin/index_commit .")
    print("To re-import (after compaction):    bin/import %s %s" % (from_id, to_id))





if __name__ == "__main__":
    main(sys.argv)
